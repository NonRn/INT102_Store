/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import Code.*;
import Code.Customer;
import Code.Product;
import Code.Product.ProType;
import static Code.Product.ProType.*;
import Code.Products;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;

/**
 *
 * @author internet
 */
public class MyCart extends javax.swing.JFrame {
    private long id ;
    /*
     Cart เป็นเหมือนตะกร้าสินค้า ลูกค้าสามารถหยิบสินค้าลงในตะกร้าได้ เมื่อหยิบในตะกร้าแล้วจำนวนสินค้าที่เช้ลจะลดลง และลูกค้าสามารถหยิบออกจากตะกร้าได้
          status ใน Database เป็น 0 คืออยู่ในตะกร้า ยังไม่ได้จ่ายตัง เป็น 1 คือ ซื้อแล้ว
     */
    public MyCart(long id) {
        initComponents();
        jTextArea1.setEditable(false);  // ไม่ให้แก้ไข TextArea ที่แสดงข้อมูลสินค้าใน cart
        this.id = id ;
        idInCart.setText("ID : "+id);  // ตรวจสอบ id Customer 
        textAreaCart();    // เรียกใช้เมธอด เพื่อเอาค่าใส่ใน TextArea
        setLocationRelativeTo(null);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        idInCart = new javax.swing.JLabel();
        Buy = new javax.swing.JButton();
        Clear = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        deleteProId = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setText("<< BACK");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setText("CART");

        idInCart.setText("ID : ");

        Buy.setText("Buy Now");
        Buy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyActionPerformed(evt);
            }
        });

        Clear.setText("Clear Cart");
        Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        deleteProId.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        deleteProId.setText("   Pro ID");

        jCheckBox1.setText("Use point for discount");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(idInCart, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(Buy, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jCheckBox1)))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Delete)
                    .addComponent(deleteProId, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(Clear, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idInCart, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Buy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteProId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(20, 20, 20))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearActionPerformed
        // เมื่อกดปุ่ม Clear Cart
        try {
            Connection con = Code.ConnectionBuilder.connect();
            PreparedStatement ps = con.prepareStatement("Select productid,amount from cart where customer = "+id+" and status = 0");
            ResultSet rs = ps.executeQuery();
            while (rs.next()){
                PreparedStatement ps2 = con.prepareStatement("Delete from Cart where productId = "+rs.getLong(1)+" and Customer = "+id+" and status = 0");
                PreparedStatement ps3 = con.prepareStatement("Select amount from product where proId = "+rs.getLong(1));
                ResultSet rs3 = ps3.executeQuery();
                rs3.next();
                PreparedStatement ps4 = con.prepareStatement("Update product set amount = "+(rs.getInt(2)+rs3.getInt(1))+" where proId = "+rs.getLong(1));
                ps4.executeUpdate();
                ps2.executeUpdate();
            }
            textAreaCart();
        } catch (Exception e){
            e.getMessage();
        }
    }//GEN-LAST:event_ClearActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed

        try {
            
           long delId = Long.parseLong(deleteProId.getText());
           
                
           Connection con = Code.ConnectionBuilder.connect();  //เชื่อมต่อ Database
            // 1.เอาค่าจำนวนสินค้าในสต๊อก  2.ลบสินค่าชิ้นนั้นออกจาก cart  3.เอาค่าจำนวนสินค้าใน Cart  4.เมื่อลบใน cart ต้องกลับไปเพิ่มในสต๊อก
            PreparedStatement ps = con.prepareStatement("Select amount from Product where proId = "+delId);
            PreparedStatement ps2 = con.prepareStatement("Delete from Cart where productId = "+delId+" and Customer = "+id+" and status = 0");
            PreparedStatement ps3 = con.prepareStatement("Select amount from Cart where productId = "+delId+" and Customer = "+id+" and status = 0");
            ResultSet rs = ps.executeQuery();
            ResultSet rs3 = ps3.executeQuery();
            rs.next();
            rs3.next();
            PreparedStatement ps4 = con.prepareStatement("Update product set amount = "+(rs.getInt(1)+rs3.getInt(1))+" where proId = "+delId);
            ps4.executeUpdate();
            ps2.executeUpdate();
            textAreaCart();
        } catch (NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Enter product ID!", "Err", JOptionPane.ERROR_MESSAGE);
        }  catch (Exception e){
            System.out.println(e.getMessage());
        }
    
    }//GEN-LAST:event_DeleteActionPerformed

    private void BuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyActionPerformed
        // เมื่อคลิ๊กปุ่ม Buy
        // สิ่งที่ต้องทำเมื่อลูกค้าซื้อคือ 1.เอาข้อมูลจาก cart ไปลง products และ listorder   
        // 2.เปลี่ยน status ใน cart จาก 0 เป็น 1 เมื่อซื้อสินค้านั้นแล้ว   3.แสดงใบออร์เดอร์   
        try {//1
            Connection con = ConnectionBuilder.connect();
            PreparedStatement ps = con.prepareStatement("Select * from Cart where customer = "+id+" and status = 0");
            PreparedStatement ps2 = con.prepareStatement("insert into listorder (customer,datebuy) values ("+id+",CURRENT_TIMESTAMP)");
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()){
            ps2.executeUpdate();
            PreparedStatement ps3 = con.prepareStatement("select id from listorder where customer = "+id);
            ResultSet rs3 = ps3.executeQuery();
            int orId = 0 ;
            while (rs3.next())
                orId = rs3.getInt(1);
            rs = ps.executeQuery();
            PreparedStatement ps4 = con.prepareStatement("insert into products values(?,?,?)");
            //2
            PreparedStatement ps5 = con.prepareStatement("update cart set status = 1 where customer = "+id+" and productid = ?");
            ArrayList<Products> pp= new ArrayList() ;
            while (rs.next()){
                ps4.setInt(1, orId);
                ps4.setLong(2, rs.getLong(1));
                ps4.setInt(3, rs.getInt("amount"));
                ps5.setLong(1, rs.getLong(1));
                ps4.executeUpdate();
                ps5.executeUpdate();
                PreparedStatement ps6 = con.prepareStatement("Select * from product where proId = "+rs.getLong(1));
                ResultSet rs6 = ps6.executeQuery();
                rs6.next();
                String a = rs6.getString(4);
                ProType pt = null;
                if (a.equals("Stationery")) {  // เช็ค Type ของสินค้าว่าเลือกอันไหนอยู่
                    pt = Stationery ;
                } else if (a.equals("Electronics")) {
                    pt = Electronics ;
                } else if (a.equals("Equipment")) {
                    pt = Equipment ;
                } else if (a.equals("Costume")) {
                    pt = Costume ;
                } else if (a.equals("MusicAndGame")) {
                    pt = MusicAndGame ;
                } else if (a.equals("Other")) {
                    pt = Other ;
                }
                Product p = new Product(rs6.getLong(1), rs6.getString(2), rs6.getString(3),pt ,rs6.getDouble(5) , rs6.getDouble(6));
                Products pros = new Products(p, rs.getInt("amount"));
                pp.add(pros);
                //pp.size();
            }
            Product del = new Product(9999, "Delivery Charge", "", ProType.Other, 50, 0);
            Products deli = new Products(del, 1);
            pp.add(deli);
            
            PreparedStatement ps7 = con.prepareStatement("Select * from Customer where cusId = "+id);
            ResultSet rs7 = ps7.executeQuery();
            Customer c = null;
            if(rs7.next()){
               c = new Customer(rs7.getString(2), rs7.getString(3), rs7.getInt(1), rs7.getInt(4), rs7.getString(5), rs7.getInt(6), rs7.getString(7), rs7.getDate(8));
            }
            if (jCheckBox1.isSelected()){
                
                Product dis = new Product(0000, "Discount from your point", "", ProType.Other, -(rs7.getInt("cuspoint")), 0);
                Products disc = new Products(dis, 1);
                pp.add(disc);
                PreparedStatement ps9 = con.prepareStatement("Update customer set cuspoint = "+ rs7.getInt("cuspoint")+" where cusid = "+id);
                ps9.executeUpdate();
            }  
            //String tab = "          ";
            //String aa = tab+tab+tab+tab+"Order ID : "+orId+"  \nShow order";
            
            //3
            int i = JOptionPane.showConfirmDialog(null,"Buy Success \nClick OK to download order as text file", "Success", JOptionPane.CLOSED_OPTION, JOptionPane.PLAIN_MESSAGE);
            double total = 0 ;
            int newPoint = 0 ;
            if (i==0){
                String fileName = "Order_Id_"+orId+".txt";
                String fileName2 = "Order_Id_"+orId+".dat";
                FileWriter fw = new FileWriter(fileName);
                FileOutputStream fos2 = new FileOutputStream(fileName2);
                Order o1 = new Order(orId,pp ,c);
                //ObjectOutputStream oos = new ObjectOutputStream(fos);
                ObjectOutputStream oos2 = new ObjectOutputStream(fos2);
                fw.write(o1.toString());
                oos2.writeObject(o1);
                fw.close();
                oos2.close();
                FileInputStream fis = new FileInputStream(fileName2);
                ObjectInputStream ois = new ObjectInputStream(fis);
                Object o = ois.readObject();
                System.out.println(o);
                total = o1.getTotal();
                newPoint = (int)o1.computePoints(total);
                JDialog diaOrder = new JDialog(getOwner(), "Order"); //สร้าง Dialog (เมื่อเป็น หน้าใหม่แบบไม่ต้องสร้างเป็น class)
                diaOrder.setVisible(true);
                JTextArea showOrder = new JTextArea(o.toString());
                showOrder.setEditable(false);
                //showOrder.add(new JLabel(o.toString()));
                diaOrder.add(showOrder, BorderLayout.CENTER);  //ให้ JPanal อยู่ใน JDialog และ อยู่ตรงกลางของ JDialog
                diaOrder.pack();
            }else {
                Order o1 = new Order(orId,pp ,c);
                total = o1.getTotal();
                newPoint = (int)o1.computePoints(total);
                JDialog diaOrder = new JDialog(getOwner(), "Order"); //สร้าง Dialog (เมื่อเป็น หน้าใหม่แบบไม่ต้องสร้างเป็น class)
                diaOrder.setVisible(true);
                JTextArea showOrder = new JTextArea("Total = "+ total +"\n You can pay in 7days");
                diaOrder.add(showOrder, BorderLayout.CENTER);  //ให้ JPanal อยู่ใน JDialog และ อยู่ตรงกลางของ JDialog
                diaOrder.pack();
            }
            PreparedStatement ps8 = con.prepareStatement("update listorder set total = "+total+" where id = "+orId);
            ps8.executeUpdate();
            if (jCheckBox1.isSelected()){
                if (newPoint < 0){
                    PreparedStatement ps10 = con.prepareStatement("update customer set cuspoint = "+0+" where cusid = "+id); // -2 คือค่าจัดส่ง 50บาท ได้ 2 point
                    ps10.executeUpdate();
                }
                else {
                PreparedStatement ps10 = con.prepareStatement("update customer set cuspoint = "+(newPoint)+" where cusid = "+id); // -2 คือค่าจัดส่ง 50บาท ได้ 2 point
                ps10.executeUpdate();
                }
            } else {
                PreparedStatement ps10 = con.prepareStatement("select cuspoint from customer where cusid = "+id);
                ResultSet rs10 = ps10.executeQuery();
                rs10.next();
                PreparedStatement ps11 = con.prepareStatement("update customer set cuspoint = "+(newPoint+rs10.getInt(1))+" where cusid = "+id);
                ps11.executeUpdate();
            }
            textAreaCart();
            System.out.println("Buy success, You can pay in 7days");
            }
            con.close();
        } catch (Exception e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_BuyActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    private void textAreaCart(){
        try{
            Connection con = Code.ConnectionBuilder.connect();  //ต่อ Database เอาค่าทั้งหมดใน Cart ที่ statusเป็น0 และ Product
            PreparedStatement ps = con.prepareStatement("Select * from Cart where customer = "+id+" and status = 0");
            PreparedStatement ps2 = con.prepareStatement("Select * from Product where proid = ?");
            ResultSet rs = ps.executeQuery();
            String all = "Product Id\tProduct Name\t\tPrice/piece   Amount\tTotal\n" ; //ใส่ข้อมูลใน Text Area
            if (rs.next()){
                double total = 0 ;
                do{
                   all += rs.getLong("productid");
                   ps2.setLong(1, rs.getLong("productid"));
                   ResultSet rs2 = ps2.executeQuery();
                   rs2.next();
                   double pi = rs2.getDouble("proprice");
                   int amo = rs.getInt("amount") ;
                   total += (pi*amo) ;
                   all += "\t"+rs2.getString("proname");
                   all += "\t    "+pi;
                   all += "\t"+amo;
                   all += "\t"+(pi*amo)+"\n";
                }while (rs.next());
                all += " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n";
                all += "  \t\t\tTotal\t"+total ;
            } else {
                all += "\n\n\t\tDon't have product in your cart.";
            }
            jTextArea1.setText(all);
        }catch (Exception e){
            System.out.println(e.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MyCart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MyCart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MyCart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MyCart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MyCart(0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buy;
    private javax.swing.JButton Clear;
    private javax.swing.JButton Delete;
    private javax.swing.JTextField deleteProId;
    private javax.swing.JLabel idInCart;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
